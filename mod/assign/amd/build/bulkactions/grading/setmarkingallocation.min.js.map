{"version":3,"file":"setmarkingallocation.min.js","sources":["../../../src/bulkactions/grading/setmarkingallocation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Bulk action for allocating markers in the assignment grading page.\n *\n * @module     mod_assign/bulkactions/grading/setmarkingallocation\n * @copyright  2024 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BulkAction from 'core/bulkactions/bulk_action';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\n\nconst Selectors = {\n    selectBulkItemCheckbox: 'input[type=\"checkbox\"][name=\"selectedusers\"]:checked',\n};\n\nexport default class extends BulkAction {\n    /** @type {number} The course module ID. */\n    #cmid;\n\n    /**\n     * The class constructor.\n     *\n     * @param {number} cmid The course module ID.\n     */\n    constructor(cmid) {\n        super();\n        this.#cmid = cmid;\n    }\n\n    getBulkActionTriggerSelector() {\n        return 'button[data-action=\"setmarkingallocation\"]';\n    }\n\n    async triggerBulkAction() {\n        Notification.saveCancelPromise(\n            getString('setmarkingallocation', 'mod_assign'),\n            getString('batchoperationconfirmsetmarkingallocation', 'mod_assign'),\n            getString('batchoperationsetmarkingallocation', 'mod_assign'),\n        ).then(() => {\n            const selectedUsers = [...document.querySelectorAll(Selectors.selectBulkItemCheckbox)].map(checkbox => checkbox.value);\n            const url = new URL(window.location.href);\n            url.searchParams.set('id', this.#cmid);\n            url.searchParams.set('action', 'viewbatchmarkingallocation');\n            url.searchParams.set('selectedusers', selectedUsers.join(','));\n            window.location = url;\n\n            return;\n        }).catch(() => {\n            return;\n        });\n    }\n\n    async renderBulkActionTrigger() {\n        return Templates.render('mod_assign/bulkactions/grading/bulk_setmarkingallocation_trigger', {});\n    }\n}\n"],"names":["Selectors","BulkAction","constructor","cmid","getBulkActionTriggerSelector","saveCancelPromise","then","selectedUsers","document","querySelectorAll","map","checkbox","value","url","URL","window","location","href","searchParams","set","this","join","catch","Templates","render"],"mappings":"wzCA4BMA,iCACsB,oGAGCC,qBASzBC,YAAYC,iHAEKA,MAGjBC,qCACW,6FAIMC,mBACT,kBAAU,uBAAwB,eAClC,kBAAU,4CAA6C,eACvD,kBAAU,qCAAsC,eAClDC,MAAK,WACGC,cAAgB,IAAIC,SAASC,iBAAiBT,mCAAmCU,KAAIC,UAAYA,SAASC,QAC1GC,IAAM,IAAIC,IAAIC,OAAOC,SAASC,mBACpCJ,IAAIK,aAAaC,IAAI,kHAAMC,0DAC3BP,IAAIK,aAAaC,IAAI,SAAU,8BAC/BN,IAAIK,aAAaC,IAAI,gBAAiBZ,cAAcc,KAAK,MACzDN,OAAOC,SAAWH,OAGnBS,OAAM,gDAMFC,mBAAUC,OAAO,mEAAoE"}